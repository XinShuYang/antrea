

第一步：下载数据。

    0.  获取一个 OAuth2 令牌，你需要在你的 GitHub 账户设置中的 "Developer settings" -> "Personal access tokens" -> "Generate new token" 中创建一个新的令牌。
        当你创建令牌时，你需要选择这个令牌的权限。对于读取公开仓库的 issue，你需要 "public_repo" 权限。
        在 issue_clawer 程序中token_config参数里填入你的令牌。

    1.执行命令 python issue_clawer.py （注意：由于网络原因问题，程序可能会中断，直接重新执行命令即可）


第二步：过滤重复数据。

    0. python issue_filter.py


第三步：数据处理成QA格式,数据集分为训练集和验证集。

    1.issue_label_train_datasets.py 主要生成训练数据集，其含有四个参数 '--assign-labels' 、'--add-labels' 、'--body-prompt' 、 '--openai-key'.

        a.--assign-labels : 表示指定'label'名称，生成只包含指定'label'名称的数据.
            例子: 生成只包含'bug'和'api'标签的数据.
                python issue_label_train_datasets.py --assign-labels bug api

        b.--add-labels : 表示添加额外的label名称，需要指定label的映射关系.并生成包含有指定label的数据.
            例子: 以'github'上'issue'的'label'为例子，添加 "{'triage/duplicate': 'xx',}". 'xx'表示自定义label名称
                python issue_label_train_datasets.py --add-labels "{'triage/duplicate': 'xx',}"

        c.也可同时使用'--assign-labels' 和 '--add-labels'两个参数,即添加额外的labels,并使用指定的labels生成训练数据.
            例子：python issue_label_train_datasets.py --assign-labels bug api xx --add-labels "{'triage/duplicate': 'xx',}"

        d.使用所有labels(默认)。
            例子：python issue_label_train_datasets.py

        e.--body-prompt : 表示是否需要对body部分数据使用chatgpt进行简要的信息概括，程序中给定了三种prompt:['body_prompt_1','body_prompt_2','body_prompt_3']。
            例子：python issue_label_train_datasets.py 其他参数 --body-prompt body_prompt_3 --openai-key 'you openai key'

        最终生成的训练数据集文件名称为：issue_train_datasets.json，无标签的数据集文件名称为：issue_datasets_no_label.json

    2.issue_label_train_datasets.py 主要生成验证数据集，其通过chatgpt使用得到的训练集训练出来的模型，并使用这个模型对无标签的数据生成标签，并把它当作验证集数据。

        例子：python issue_label_evaluate_datasets.py --openai-key 'You openai key' --job-id 'The job ID of the model after ChatGPT training has been completed.'

        最终生成的验证集数据文件名为：issue_evaluate_datasets.json





